00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 27/02/2025 21:42:16

00000000                             1  
00000000                             2  
00000000                             3  
00001000                             4      ORG    $1000
00001000  =00000000                  5  EXIT    EQU 0            ; Used to exit the program
00001000                             6  
00001000                             7  START:
00001000  6100 000E                  8      BSR     WELCOME             ; Branch to the WELCOME subroutine
00001004  6100 0020                  9      BSR     OPEN_SCENE          ; Branch to opening scene
00001008  6100 0032                 10      BSR     OPEN_PATH           ; Branch to the CHOICE subroutine
0000100C                            11  
0000100C  FFFF FFFF                 12      SIMHALT                  ; Halt simulator
00001010                            13  
00001010                            14  *-------------------------------------------------------
00001010                            15  *                   WELCOME SUBROUTINE
00001010                            16  *-------------------------------------------------------
00001010                            17  WELCOME:
00001010  6100 090A                 18      BSR     ENDL             ; New line
00001014  43F9 00001A5A             19      LEA     WELCOME_MSG, A1  ; Load welcome message
0000101A  103C 000E                 20      MOVE.B  #14, D0
0000101E  4E4F                      21      TRAP    #15              ; Print message
00001020  6100 08FA                 22      BSR     ENDL
00001024  4E75                      23      RTS                      ; Return
00001026                            24  
00001026                            25  *-------------------------------------------------------
00001026                            26  *                   OPEN SCENE SUBROUTINE
00001026                            27  *-------------------------------------------------------
00001026                            28  OPEN_SCENE:
00001026  6100 08F4                 29      BSR     ENDL             ; New line
0000102A  43F9 00001C28             30      LEA     OPEN_MSG, A1  ; Load welcome message
00001030  103C 000E                 31      MOVE.B  #14, D0
00001034  4E4F                      32      TRAP    #15              ; Print message
00001036  6100 08E4                 33      BSR     ENDL
0000103A  4E75                      34      RTS                      ; Return
0000103C                            35  
0000103C                            36  *-------------------------------------------------------
0000103C                            37  *                  Mines or Tower
0000103C                            38  *-------------------------------------------------------
0000103C                            39  OPEN_PATH:
0000103C  43F9 00001E4D             40      LEA     CHOICE_MSG, A1   ; Load choice message
00001042  103C 000E                 41      MOVE.B  #14, D0
00001046  4E4F                      42      TRAP    #15              ; Print message
00001048                            43  
00001048  43F9 00001A54             44      LEA     USER_INPUT, A1   ; Load input buffer address
0000104E  103C 0002                 45      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001052  4E4F                      46      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001054                            47      
00001054  1239 00001A54             48      MOVE.B  USER_INPUT, D1   ; Load user input into D1
0000105A                            49  
0000105A  B23C 0031                 50      CMP.B   #'1', D1         ; Compare input to '1'
0000105E  6700 0010                 51      BEQ     MINE            ; If '1', branch to FIGHT
00001062                            52  
00001062  B23C 0032                 53      CMP.B   #'2', D1         ; Compare input to '2'
00001066  6700 0468                 54      BEQ     TOWER        ; If '2', branch to RUN_AWAY
0000106A                            55  
0000106A  6100 089E                 56      BSR     INVALID_CHOICE   ; If input is invalid, show error
0000106E  61CC                      57      BSR     OPEN_PATH           ; Repeat input prompt
00001070                            58      
00001070                            59  
00001070                            60  *-------------------------------------------------------
00001070                            61  *                   MINE SEQUENCE
00001070                            62  *-------------------------------------------------------
00001070                            63  MINE:
00001070  6100 08AA                 64      BSR     ENDL
00001074  43F9 00001E6B             65      LEA     MINES_MSG, A1
0000107A  103C 000E                 66      MOVE.B  #14, D0
0000107E  4E4F                      67      TRAP    #15              ; Print MINES message
00001080                            68  
00001080  43F9 00001A54             69      LEA     USER_INPUT, A1   ; Load input buffer address
00001086  103C 0002                 70      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000108A  4E4F                      71      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
0000108C                            72      
0000108C  1239 00001A54             73      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001092                            74  
00001092  B23C 0031                 75      CMP.B   #'1', D1         ; Compare input to '1'
00001096  6700 0024                 76      BEQ     MINE_ROOM_1            ; If '1', branch to FIGHT
0000109A                            77      
0000109A  13FC 0003 000025DC        78      MOVE.B  #3,P_HP
000010A2  13FC 0003 000025DD        79      MOVE.B  #3,E_HP
000010AA  B23C 0032                 80      CMP.B   #'2', D1         ; Compare input to '2'
000010AE  6700 0058                 81      BEQ     MINE_FIGHT_1     ; If '2', branch to 
000010B2                            82      
000010B2                            83      
000010B2  6100 0868                 84      BSR     ENDL
000010B6  6100 0852                 85      BSR     INVALID_CHOICE   ; If input is invalid, show error
000010BA  61B4                      86      BSR     MINE           ; Repeat input prompt
000010BC                            87  
000010BC                            88  MINE_ROOM_1:
000010BC  6100 085E                 89      BSR     ENDL
000010C0  13FC 0003 000025DC        90      MOVE.B  #3,P_HP
000010C8  13FC 0003 000025DD        91      MOVE.B  #3,E_HP
000010D0                            92      
000010D0  43F9 00001F58             93      LEA     MINES_MSG1, A1
000010D6  103C 000E                 94      MOVE.B  #14, D0
000010DA  4E4F                      95      TRAP    #15              ; Print MINES message
000010DC                            96      
000010DC  43F9 00001A54             97      LEA     USER_INPUT, A1   ; Load input buffer address
000010E2  103C 0002                 98      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000010E6  4E4F                      99      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000010E8                           100      
000010E8  1239 00001A54            101      MOVE.B  USER_INPUT, D1   ; Load user input into D1
000010EE                           102  
000010EE  B23C 0031                103      CMP.B   #'1', D1         ; Compare input to '1'
000010F2  6700 0038                104      BEQ     MINE_ROOM_2      ; If '1', branch to FIGHT
000010F6                           105      
000010F6  B23C 0032                106      CMP.B   #'2', D1         ; Compare input to '2'
000010FA  6700 007C                107      BEQ     MINE_FIGHT_2     ; If '2', branch to
000010FE                           108      
000010FE                           109      
000010FE  6100 081C                110      BSR     ENDL
00001102  6100 0806                111      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001106  61B4                     112      BSR     MINE_ROOM_1           ; Repeat input prompt
00001108                           113      
00001108                           114      
00001108                           115  MINE_FIGHT_1:
00001108  6100 0812                116      BSR     ENDL
0000110C  43F9 00002118            117      LEA     FIGHT_T_MSG, A1
00001112  103C 000E                118      MOVE.B  #14, D0
00001116  4E4F                     119      TRAP    #15              ; Print MINES message
00001118  13FC 0003 000025DC       120      MOVE.B  #3,P_HP
00001120  13FC 0003 000025DD       121      MOVE.B  #3,E_HP
00001128                           122  *    BSR FIGHT
00001128  6100 0072                123      BSR MINE_ROOM_3
0000112C                           124      
0000112C                           125  MINE_ROOM_2:
0000112C  6100 07EE                126      BSR     ENDL
00001130  13FC 0003 000025DC       127      MOVE.B  #3,P_HP
00001138  13FC 0003 000025DD       128      MOVE.B  #3,E_HP
00001140                           129      
00001140  43F9 00001F58            130      LEA     MINES_MSG1, A1
00001146  103C 000E                131      MOVE.B  #14, D0
0000114A  4E4F                     132      TRAP    #15              ; Print MINES message
0000114C                           133      
0000114C  43F9 00001A54            134      LEA     USER_INPUT, A1   ; Load input buffer address
00001152  103C 0002                135      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001156  4E4F                     136      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001158                           137      
00001158  1239 00001A54            138      MOVE.B  USER_INPUT, D1   ; Load user input into D1
0000115E                           139  
0000115E  B23C 0031                140      CMP.B   #'1', D1         ; Compare input to '1'
00001162  6700 0038                141      BEQ     MINE_ROOM_3      ; If '1', branch to FIGHT
00001166                           142      
00001166  B23C 0032                143      CMP.B   #'2', D1         ; Compare input to '2'
0000116A  6700 007E                144      BEQ     MINE_FIGHT_3     ; If '2', branch to
0000116E                           145      
0000116E                           146      
0000116E  6100 07AC                147      BSR     ENDL
00001172  6100 0796                148      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001176  61B4                     149      BSR     MINE_ROOM_2           ; Repeat input prompt
00001178                           150      
00001178                           151      
00001178                           152  MINE_FIGHT_2:
00001178  6100 07A2                153      BSR     ENDL
0000117C  43F9 00002118            154      LEA     FIGHT_T_MSG, A1
00001182  103C 000E                155      MOVE.B  #14, D0
00001186  4E4F                     156      TRAP    #15              ; Print MINES message
00001188  13FC 0003 000025DC       157      MOVE.B  #3,P_HP
00001190  13FC 0003 000025DD       158      MOVE.B  #3,E_HP
00001198                           159  *    BSR FIGHT
00001198  6100 0074                160      BSR MINE_ROOM_4
0000119C                           161  
0000119C                           162  MINE_ROOM_3:
0000119C  6100 077E                163      BSR     ENDL
000011A0  13FC 0003 000025DC       164      MOVE.B  #3,P_HP
000011A8  13FC 0003 000025DD       165      MOVE.B  #3,E_HP
000011B0                           166      
000011B0  43F9 00002037            167      LEA     MINES_MSG2, A1
000011B6  103C 000E                168      MOVE.B  #14, D0
000011BA  4E4F                     169      TRAP    #15              ; Print MINES message
000011BC                           170      
000011BC  43F9 00001A54            171      LEA     USER_INPUT, A1   ; Load input buffer address
000011C2  103C 0002                172      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000011C6  4E4F                     173      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000011C8                           174      
000011C8  1239 00001A54            175      MOVE.B  USER_INPUT, D1   ; Load user input into D1
000011CE                           176  
000011CE  B23C 0031                177      CMP.B   #'1', D1         ; Compare input to '1'
000011D2  6700 003A                178      BEQ     MINE_ROOM_4      ; If '1', branch to FIGHT
000011D6                           179      
000011D6  B23C 0032                180      CMP.B   #'2', D1         ; Compare input to '2'
000011DA  6700 0080                181      BEQ     MINE_FIGHT_4     ; If '2', branch to
000011DE                           182      
000011DE                           183      
000011DE  6100 073C                184      BSR     ENDL
000011E2  6100 0726                185      BSR     INVALID_CHOICE   ; If input is invalid, show error
000011E6  6100 FF44                186      BSR     MINE_ROOM_2           ; Repeat input prompt
000011EA                           187      
000011EA                           188      
000011EA                           189  MINE_FIGHT_3:
000011EA  6100 0730                190      BSR     ENDL
000011EE  43F9 00002118            191      LEA     FIGHT_T_MSG, A1
000011F4  103C 000E                192      MOVE.B  #14, D0
000011F8  4E4F                     193      TRAP    #15              ; Print MINES message
000011FA  13FC 0003 000025DC       194      MOVE.B  #3,P_HP
00001202  13FC 0003 000025DD       195      MOVE.B  #3,E_HP
0000120A                           196  *    BSR FIGHT
0000120A  6100 0074                197      BSR MINE_ROOM_5
0000120E                           198  
0000120E                           199  MINE_ROOM_4:
0000120E  6100 070C                200      BSR     ENDL
00001212  13FC 0003 000025DC       201      MOVE.B  #3,P_HP
0000121A  13FC 0003 000025DD       202      MOVE.B  #3,E_HP
00001222                           203      
00001222  43F9 00002037            204      LEA     MINES_MSG2, A1
00001228  103C 000E                205      MOVE.B  #14, D0
0000122C  4E4F                     206      TRAP    #15              ; Print MINES message
0000122E                           207      
0000122E  43F9 00001A54            208      LEA     USER_INPUT, A1   ; Load input buffer address
00001234  103C 0002                209      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001238  4E4F                     210      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
0000123A                           211      
0000123A  1239 00001A54            212      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001240                           213  
00001240  B23C 0031                214      CMP.B   #'1', D1         ; Compare input to '1'
00001244  6700 003A                215      BEQ     MINE_ROOM_5      ; If '1', branch to FIGHT
00001248                           216      
00001248  B23C 0032                217      CMP.B   #'2', D1         ; Compare input to '2'
0000124C  6700 0080                218      BEQ     MINE_FIGHT_5     ; If '2', branch to
00001250                           219      
00001250                           220      
00001250  6100 06CA                221      BSR     ENDL
00001254  6100 06B4                222      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001258  6100 0026                223      BSR     MINE_ROOM_5           ; Repeat input prompt
0000125C                           224      
0000125C                           225      
0000125C                           226  MINE_FIGHT_4:
0000125C  6100 06BE                227      BSR     ENDL
00001260  43F9 00002118            228      LEA     FIGHT_T_MSG, A1
00001266  103C 000E                229      MOVE.B  #14, D0
0000126A  4E4F                     230      TRAP    #15              ; Print MINES message
0000126C  13FC 0003 000025DC       231      MOVE.B  #3,P_HP
00001274  13FC 0003 000025DD       232      MOVE.B  #3,E_HP
0000127C                           233  *    BSR FIGHT
0000127C  6100 0074                234      BSR MINE_ROOM_6
00001280                           235  
00001280                           236  MINE_ROOM_5:
00001280  6100 069A                237      BSR     ENDL
00001284  13FC 0003 000025DC       238      MOVE.B  #3,P_HP
0000128C  13FC 0003 000025DD       239      MOVE.B  #3,E_HP
00001294                           240      
00001294  43F9 00001F58            241      LEA     MINES_MSG1, A1
0000129A  103C 000E                242      MOVE.B  #14, D0
0000129E  4E4F                     243      TRAP    #15              ; Print MINES message
000012A0                           244      
000012A0  43F9 00001A54            245      LEA     USER_INPUT, A1   ; Load input buffer address
000012A6  103C 0002                246      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000012AA  4E4F                     247      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000012AC                           248      
000012AC  1239 00001A54            249      MOVE.B  USER_INPUT, D1   ; Load user input into D1
000012B2                           250  
000012B2  B23C 0031                251      CMP.B   #'1', D1         ; Compare input to '1'
000012B6  6700 003A                252      BEQ     MINE_ROOM_6      ; If '1', branch to FIGHT
000012BA                           253      
000012BA  B23C 0032                254      CMP.B   #'2', D1         ; Compare input to '2'
000012BE  6700 007E                255      BEQ     MINE_FIGHT_6     ; If '2', branch to
000012C2                           256      
000012C2                           257      
000012C2  6100 0658                258      BSR     ENDL
000012C6  6100 0642                259      BSR     INVALID_CHOICE   ; If input is invalid, show error
000012CA  6100 0026                260      BSR     MINE_ROOM_6           ; Repeat input prompt
000012CE                           261      
000012CE                           262      
000012CE                           263  MINE_FIGHT_5:
000012CE  6100 064C                264      BSR     ENDL
000012D2  43F9 00002118            265      LEA     FIGHT_T_MSG, A1
000012D8  103C 000E                266      MOVE.B  #14, D0
000012DC  4E4F                     267      TRAP    #15              ; Print MINES message
000012DE  13FC 0003 000025DC       268      MOVE.B  #3,P_HP
000012E6  13FC 0003 000025DD       269      MOVE.B  #3,E_HP
000012EE                           270  *    BSR FIGHT
000012EE  6100 0072                271      BSR MINE_ROOM_7
000012F2                           272  
000012F2                           273  MINE_ROOM_6:
000012F2  6100 0628                274      BSR     ENDL
000012F6  13FC 0003 000025DC       275      MOVE.B  #3,P_HP
000012FE  13FC 0003 000025DD       276      MOVE.B  #3,E_HP
00001306                           277      
00001306  43F9 00002037            278      LEA     MINES_MSG2, A1
0000130C  103C 000E                279      MOVE.B  #14, D0
00001310  4E4F                     280      TRAP    #15              ; Print MINES message
00001312                           281      
00001312  43F9 00001A54            282      LEA     USER_INPUT, A1   ; Load input buffer address
00001318  103C 0002                283      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000131C  4E4F                     284      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
0000131E                           285      
0000131E  1239 00001A54            286      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001324                           287  
00001324  B23C 0031                288      CMP.B   #'1', D1         ; Compare input to '1'
00001328  6700 0038                289      BEQ     MINE_ROOM_7      ; If '1', branch to FIGHT
0000132C                           290      
0000132C  B23C 0032                291      CMP.B   #'2', D1         ; Compare input to '2'
00001330  6700 007C                292      BEQ     MINE_FIGHT_7     ; If '2', branch to
00001334                           293      
00001334                           294      
00001334  6100 05E6                295      BSR     ENDL
00001338  6100 05D0                296      BSR     INVALID_CHOICE   ; If input is invalid, show error
0000133C  61B4                     297      BSR     MINE_ROOM_6           ; Repeat input prompt
0000133E                           298      
0000133E                           299      
0000133E                           300  MINE_FIGHT_6:
0000133E  6100 05DC                301      BSR     ENDL
00001342  43F9 00002118            302      LEA     FIGHT_T_MSG, A1
00001348  103C 000E                303      MOVE.B  #14, D0
0000134C  4E4F                     304      TRAP    #15              ; Print MINES message
0000134E  13FC 0003 000025DC       305      MOVE.B  #3,P_HP
00001356  13FC 0003 000025DD       306      MOVE.B  #3,E_HP
0000135E                           307  *    BSR FIGHT
0000135E  6100 0072                308      BSR MINE_ROOM_8
00001362                           309      
00001362                           310  MINE_ROOM_7:
00001362  6100 05B8                311      BSR     ENDL
00001366  13FC 0003 000025DC       312      MOVE.B  #3,P_HP
0000136E  13FC 0003 000025DD       313      MOVE.B  #3,E_HP
00001376                           314      
00001376  43F9 00002037            315      LEA     MINES_MSG2, A1
0000137C  103C 000E                316      MOVE.B  #14, D0
00001380  4E4F                     317      TRAP    #15              ; Print MINES message
00001382                           318      
00001382  43F9 00001A54            319      LEA     USER_INPUT, A1   ; Load input buffer address
00001388  103C 0002                320      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000138C  4E4F                     321      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
0000138E                           322      
0000138E  1239 00001A54            323      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001394                           324  
00001394  B23C 0031                325      CMP.B   #'1', D1         ; Compare input to '1'
00001398  6700 0038                326      BEQ     MINE_ROOM_8      ; If '1', branch to FIGHT
0000139C                           327      
0000139C  B23C 0032                328      CMP.B   #'2', D1         ; Compare input to '2'
000013A0  6700 007C                329      BEQ     MINE_FIGHT_8     ; If '2', branch to
000013A4                           330      
000013A4                           331      
000013A4  6100 0576                332      BSR     ENDL
000013A8  6100 0560                333      BSR     INVALID_CHOICE   ; If input is invalid, show error
000013AC  61B4                     334      BSR     MINE_ROOM_7           ; Repeat input prompt
000013AE                           335      
000013AE                           336      
000013AE                           337  MINE_FIGHT_7:
000013AE  6100 056C                338      BSR     ENDL
000013B2  43F9 00002118            339      LEA     FIGHT_T_MSG, A1
000013B8  103C 000E                340      MOVE.B  #14, D0
000013BC  4E4F                     341      TRAP    #15              ; Print MINES message
000013BE  13FC 0003 000025DC       342      MOVE.B  #3,P_HP
000013C6  13FC 0003 000025DD       343      MOVE.B  #3,E_HP
000013CE                           344  *    BSR FIGHT
000013CE  6100 0072                345      BSR MINE_ROOM_9
000013D2                           346  
000013D2                           347  MINE_ROOM_8:
000013D2  6100 0548                348      BSR     ENDL
000013D6  13FC 0003 000025DC       349      MOVE.B  #3,P_HP
000013DE  13FC 0003 000025DD       350      MOVE.B  #3,E_HP
000013E6                           351      
000013E6  43F9 00001F58            352      LEA     MINES_MSG1, A1
000013EC  103C 000E                353      MOVE.B  #14, D0
000013F0  4E4F                     354      TRAP    #15              ; Print MINES message
000013F2                           355      
000013F2  43F9 00001A54            356      LEA     USER_INPUT, A1   ; Load input buffer address
000013F8  103C 0002                357      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000013FC  4E4F                     358      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000013FE                           359      
000013FE  1239 00001A54            360      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001404                           361  
00001404  B23C 0031                362      CMP.B   #'1', D1         ; Compare input to '1'
00001408  6700 0038                363      BEQ     MINE_ROOM_9      ; If '1', branch to FIGHT
0000140C                           364      
0000140C  B23C 0032                365      CMP.B   #'2', D1         ; Compare input to '2'
00001410  6700 007C                366      BEQ     MINE_FIGHT_9    ; If '2', branch to
00001414                           367      
00001414                           368      
00001414  6100 0506                369      BSR     ENDL
00001418  6100 04F0                370      BSR     INVALID_CHOICE   ; If input is invalid, show error
0000141C  61B4                     371      BSR     MINE_ROOM_8           ; Repeat input prompt
0000141E                           372      
0000141E                           373      
0000141E                           374  MINE_FIGHT_8:
0000141E  6100 04FC                375      BSR     ENDL
00001422  43F9 00002118            376      LEA     FIGHT_T_MSG, A1
00001428  103C 000E                377      MOVE.B  #14, D0
0000142C  4E4F                     378      TRAP    #15              ; Print MINES message
0000142E  13FC 0003 000025DC       379      MOVE.B  #3,P_HP
00001436  13FC 0003 000025DD       380      MOVE.B  #3,E_HP
0000143E                           381  *    BSR FIGHT
0000143E  6100 0072                382      BSR MINE_ROOM_10
00001442                           383      
00001442                           384  MINE_ROOM_9:
00001442  6100 04D8                385      BSR     ENDL
00001446  13FC 0003 000025DC       386      MOVE.B  #3,P_HP
0000144E  13FC 0003 000025DD       387      MOVE.B  #3,E_HP
00001456                           388      
00001456  43F9 00001F58            389      LEA     MINES_MSG1, A1
0000145C  103C 000E                390      MOVE.B  #14, D0
00001460  4E4F                     391      TRAP    #15              ; Print MINES message
00001462                           392      
00001462  43F9 00001A54            393      LEA     USER_INPUT, A1   ; Load input buffer address
00001468  103C 0002                394      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000146C  4E4F                     395      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
0000146E                           396      
0000146E  1239 00001A54            397      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001474                           398  
00001474  B23C 0031                399      CMP.B   #'1', D1         ; Compare input to '1'
00001478  6700 0038                400      BEQ     MINE_ROOM_10      ; If '1', branch to FIGHT
0000147C                           401      
0000147C  B23C 0032                402      CMP.B   #'2', D1         ; Compare input to '2'
00001480  6700 0030                403      BEQ     MINE_ROOM_10     ; If '2', branch to
00001484                           404      
00001484                           405      
00001484  6100 0496                406      BSR     ENDL
00001488  6100 0480                407      BSR     INVALID_CHOICE   ; If input is invalid, show error
0000148C  61B4                     408      BSR     MINE_ROOM_9           ; Repeat input prompt
0000148E                           409      
0000148E                           410      
0000148E                           411  MINE_FIGHT_9:
0000148E  6100 048C                412      BSR     ENDL
00001492  43F9 00002118            413      LEA     FIGHT_T_MSG, A1
00001498  103C 000E                414      MOVE.B  #14, D0
0000149C  4E4F                     415      TRAP    #15              ; Print MINES message
0000149E  13FC 0003 000025DC       416      MOVE.B  #3,P_HP
000014A6  13FC 0003 000025DD       417      MOVE.B  #3,E_HP
000014AE                           418  *    BSR FIGHT
000014AE  6100 0002                419      BSR MINE_ROOM_10
000014B2                           420  
000014B2                           421  MINE_ROOM_10:
000014B2                           422      
000014B2  43F9 0000212F            423      LEA     CUT_MINE, A1
000014B8  103C 000E                424      MOVE.B  #14, D0
000014BC  4E4F                     425      TRAP    #15              ; Print MINES message
000014BE  6100 045C                426      BSR     ENDL
000014C2  5204                     427      ADD.B   #1,D4
000014C4                           428      
000014C4  B83C 0002                429      CMP.B   #2,D4
000014C8  6700 042C                430      BEQ     MOUNT
000014CC                           431      
000014CC  6100 0002                432      BSR     TOWER
000014D0                           433     
000014D0                           434      
000014D0                           435      
000014D0                           436  
000014D0                           437  
000014D0                           438  *-------------------------------------------------------
000014D0                           439  *                  TOWER SEQUENCE
000014D0                           440  *-------------------------------------------------------
000014D0                           441  TOWER:
000014D0  6100 044A                442      BSR     ENDL
000014D4  43F9 00002413            443      LEA     TOWER_MSG, A1
000014DA  103C 000E                444      MOVE.B  #14, D0
000014DE  4E4F                     445      TRAP    #15              ; Print run message
000014E0  6100 0002                446      BSR TOWER_ROOM_1
000014E4                           447  
000014E4                           448  TOWER_ROOM_1:
000014E4  6100 0436                449      BSR     ENDL
000014E8  13FC 0003 000025DC       450      MOVE.B  #3,P_HP
000014F0  13FC 0003 000025DD       451      MOVE.B  #3,E_HP
000014F8                           452      
000014F8  43F9 00002413            453      LEA     TOWER_MSG, A1
000014FE  103C 000E                454      MOVE.B  #14, D0
00001502  4E4F                     455      TRAP    #15              ; Print MINES message
00001504                           456      
00001504  43F9 00001A54            457      LEA     USER_INPUT, A1   ; Load input buffer address
0000150A  103C 0002                458      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000150E  4E4F                     459      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001510                           460      
00001510  1239 00001A54            461      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001516                           462  
00001516  B23C 0031                463      CMP.B   #'1', D1         ; Compare input to '1'
0000151A  6700 0038                464      BEQ     TOWER_ROOM_2      ; If '1', branch to FIGHT
0000151E                           465      
0000151E  B23C 0032                466      CMP.B   #'2', D1         ; Compare input to '2'
00001522  6700 007E                467      BEQ     TOWER_FIGHT_2    ; If '2', branch to
00001526                           468      
00001526                           469      
00001526  6100 03F4                470      BSR     ENDL
0000152A  6100 03DE                471      BSR     INVALID_CHOICE   ; If input is invalid, show error
0000152E  61B4                     472      BSR     TOWER_ROOM_1           ; Repeat input prompt
00001530                           473      
00001530                           474      
00001530                           475  TOWER_FIGHT_1:
00001530  6100 03EA                476      BSR     ENDL
00001534  43F9 00002118            477      LEA     FIGHT_T_MSG, A1
0000153A  103C 000E                478      MOVE.B  #14, D0
0000153E  4E4F                     479      TRAP    #15              ; Print MINES message
00001540  13FC 0003 000025DC       480      MOVE.B  #3,P_HP
00001548  13FC 0003 000025DD       481      MOVE.B  #3,E_HP
00001550                           482  *    BSR FIGHT
00001550  6100 0074                483      BSR TOWER_ROOM_3
00001554                           484  
00001554                           485  TOWER_ROOM_2:
00001554  6100 03C6                486      BSR     ENDL
00001558  13FC 0003 000025DC       487      MOVE.B  #3,P_HP
00001560  13FC 0003 000025DD       488      MOVE.B  #3,E_HP
00001568                           489      
00001568  43F9 00002413            490      LEA     TOWER_MSG, A1
0000156E  103C 000E                491      MOVE.B  #14, D0
00001572  4E4F                     492      TRAP    #15              ; Print MINES message
00001574                           493      
00001574  43F9 00001A54            494      LEA     USER_INPUT, A1   ; Load input buffer address
0000157A  103C 0002                495      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000157E  4E4F                     496      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001580                           497      
00001580  1239 00001A54            498      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001586                           499  
00001586  B23C 0031                500      CMP.B   #'1', D1         ; Compare input to '1'
0000158A  6700 003A                501      BEQ     TOWER_ROOM_3      ; If '1', branch to FIGHT
0000158E                           502      
0000158E  B23C 0032                503      CMP.B   #'2', D1         ; Compare input to '2'
00001592  6700 007E                504      BEQ     TOWER_FIGHT_3    ; If '2', branch to
00001596                           505      
00001596                           506      
00001596  6100 0384                507      BSR     ENDL
0000159A  6100 036E                508      BSR     INVALID_CHOICE   ; If input is invalid, show error
0000159E  6100 0026                509      BSR     TOWER_ROOM_3           ; Repeat input prompt
000015A2                           510      
000015A2                           511      
000015A2                           512  TOWER_FIGHT_2:
000015A2  6100 0378                513      BSR     ENDL
000015A6  43F9 00002118            514      LEA     FIGHT_T_MSG, A1
000015AC  103C 000E                515      MOVE.B  #14, D0
000015B0  4E4F                     516      TRAP    #15              ; Print MINES message
000015B2  13FC 0003 000025DC       517      MOVE.B  #3,P_HP
000015BA  13FC 0003 000025DD       518      MOVE.B  #3,E_HP
000015C2                           519  *    BSR FIGHT
000015C2  6100 0072                520      BSR TOWER_ROOM_4
000015C6                           521  
000015C6                           522  TOWER_ROOM_3:
000015C6  6100 0354                523      BSR     ENDL
000015CA  13FC 0003 000025DC       524      MOVE.B  #3,P_HP
000015D2  13FC 0003 000025DD       525      MOVE.B  #3,E_HP
000015DA                           526      
000015DA  43F9 00002413            527      LEA     TOWER_MSG, A1
000015E0  103C 000E                528      MOVE.B  #14, D0
000015E4  4E4F                     529      TRAP    #15              ; Print MINES message
000015E6                           530      
000015E6  43F9 00001A54            531      LEA     USER_INPUT, A1   ; Load input buffer address
000015EC  103C 0002                532      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000015F0  4E4F                     533      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000015F2                           534      
000015F2  1239 00001A54            535      MOVE.B  USER_INPUT, D1   ; Load user input into D1
000015F8                           536  
000015F8  B23C 0031                537      CMP.B   #'1', D1         ; Compare input to '1'
000015FC  6700 0038                538      BEQ     TOWER_ROOM_4      ; If '1', branch to FIGHT
00001600                           539      
00001600  B23C 0032                540      CMP.B   #'2', D1         ; Compare input to '2'
00001604  6700 007C                541      BEQ     TOWER_FIGHT_4    ; If '2', branch to
00001608                           542      
00001608                           543      
00001608  6100 0312                544      BSR     ENDL
0000160C  6100 02FC                545      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001610  61B4                     546      BSR     TOWER_ROOM_3           ; Repeat input prompt
00001612                           547      
00001612                           548      
00001612                           549  TOWER_FIGHT_3:
00001612  6100 0308                550      BSR     ENDL
00001616  43F9 00002118            551      LEA     FIGHT_T_MSG, A1
0000161C  103C 000E                552      MOVE.B  #14, D0
00001620  4E4F                     553      TRAP    #15              ; Print MINES message
00001622  13FC 0003 000025DC       554      MOVE.B  #3,P_HP
0000162A  13FC 0003 000025DD       555      MOVE.B  #3,E_HP
00001632                           556  *    BSR FIGHT
00001632  6100 0072                557      BSR TOWER_ROOM_5
00001636                           558      
00001636                           559  
00001636                           560  TOWER_ROOM_4:
00001636  6100 02E4                561      BSR     ENDL
0000163A  13FC 0003 000025DC       562      MOVE.B  #3,P_HP
00001642  13FC 0003 000025DD       563      MOVE.B  #3,E_HP
0000164A                           564      
0000164A  43F9 00002413            565      LEA     TOWER_MSG, A1
00001650  103C 000E                566      MOVE.B  #14, D0
00001654  4E4F                     567      TRAP    #15              ; Print MINES message
00001656                           568      
00001656  43F9 00001A54            569      LEA     USER_INPUT, A1   ; Load input buffer address
0000165C  103C 0002                570      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001660  4E4F                     571      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001662                           572      
00001662  1239 00001A54            573      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001668                           574  
00001668  B23C 0031                575      CMP.B   #'1', D1         ; Compare input to '1'
0000166C  6700 0038                576      BEQ     TOWER_ROOM_5      ; If '1', branch to FIGHT
00001670                           577      
00001670  B23C 0032                578      CMP.B   #'2', D1         ; Compare input to '2'
00001674  6700 007C                579      BEQ     TOWER_FIGHT_5    ; If '2', branch to
00001678                           580      
00001678                           581      
00001678  6100 02A2                582      BSR     ENDL
0000167C  6100 028C                583      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001680  61B4                     584      BSR     TOWER_ROOM_4           ; Repeat input prompt
00001682                           585      
00001682                           586      
00001682                           587  TOWER_FIGHT_4:
00001682  6100 0298                588      BSR     ENDL
00001686  43F9 00002118            589      LEA     FIGHT_T_MSG, A1
0000168C  103C 000E                590      MOVE.B  #14, D0
00001690  4E4F                     591      TRAP    #15              ; Print MINES message
00001692  13FC 0003 000025DC       592      MOVE.B  #3,P_HP
0000169A  13FC 0003 000025DD       593      MOVE.B  #3,E_HP
000016A2                           594  *    BSR FIGHT
000016A2  6100 0072                595      BSR TOWER_ROOM_6
000016A6                           596  TOWER_ROOM_5:
000016A6  6100 0274                597      BSR     ENDL
000016AA  13FC 0003 000025DC       598      MOVE.B  #3,P_HP
000016B2  13FC 0003 000025DD       599      MOVE.B  #3,E_HP
000016BA                           600      
000016BA  43F9 00002413            601      LEA     TOWER_MSG, A1
000016C0  103C 000E                602      MOVE.B  #14, D0
000016C4  4E4F                     603      TRAP    #15              ; Print MINES message
000016C6                           604      
000016C6  43F9 00001A54            605      LEA     USER_INPUT, A1   ; Load input buffer address
000016CC  103C 0002                606      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000016D0  4E4F                     607      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000016D2                           608      
000016D2  1239 00001A54            609      MOVE.B  USER_INPUT, D1   ; Load user input into D1
000016D8                           610  
000016D8  B23C 0031                611      CMP.B   #'1', D1         ; Compare input to '1'
000016DC  6700 0038                612      BEQ     TOWER_ROOM_6      ; If '1', branch to FIGHT
000016E0                           613      
000016E0  B23C 0032                614      CMP.B   #'2', D1         ; Compare input to '2'
000016E4  6700 007E                615      BEQ     TOWER_FIGHT_6    ; If '2', branch to
000016E8                           616      
000016E8                           617      
000016E8  6100 0232                618      BSR     ENDL
000016EC  6100 021C                619      BSR     INVALID_CHOICE   ; If input is invalid, show error
000016F0  61B4                     620      BSR     TOWER_ROOM_5           ; Repeat input prompt
000016F2                           621      
000016F2                           622      
000016F2                           623  TOWER_FIGHT_5:
000016F2  6100 0228                624      BSR     ENDL
000016F6  43F9 00002118            625      LEA     FIGHT_T_MSG, A1
000016FC  103C 000E                626      MOVE.B  #14, D0
00001700  4E4F                     627      TRAP    #15              ; Print MINES message
00001702  13FC 0003 000025DC       628      MOVE.B  #3,P_HP
0000170A  13FC 0003 000025DD       629      MOVE.B  #3,E_HP
00001712                           630  *    BSR FIGHT
00001712  6100 0074                631      BSR TOWER_ROOM_7
00001716                           632  
00001716                           633      
00001716                           634  TOWER_ROOM_6:
00001716  6100 0204                635      BSR     ENDL
0000171A  13FC 0003 000025DC       636      MOVE.B  #3,P_HP
00001722  13FC 0003 000025DD       637      MOVE.B  #3,E_HP
0000172A                           638      
0000172A  43F9 00002413            639      LEA     TOWER_MSG, A1
00001730  103C 000E                640      MOVE.B  #14, D0
00001734  4E4F                     641      TRAP    #15              ; Print MINES message
00001736                           642      
00001736  43F9 00001A54            643      LEA     USER_INPUT, A1   ; Load input buffer address
0000173C  103C 0002                644      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001740  4E4F                     645      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001742                           646      
00001742  1239 00001A54            647      MOVE.B  USER_INPUT, D1   ; Load user input into D1
00001748                           648  
00001748  B23C 0031                649      CMP.B   #'1', D1         ; Compare input to '1'
0000174C  6700 003A                650      BEQ     TOWER_ROOM_7      ; If '1', branch to FIGHT
00001750                           651      
00001750  B23C 0032                652      CMP.B   #'2', D1         ; Compare input to '2'
00001754  6700 007E                653      BEQ     TOWER_FIGHT_7    ; If '2', branch to
00001758                           654      
00001758                           655      
00001758  6100 01C2                656      BSR     ENDL
0000175C  6100 01AC                657      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001760  6100 0026                658      BSR     TOWER_ROOM_7           ; Repeat input prompt
00001764                           659      
00001764                           660      
00001764                           661  TOWER_FIGHT_6:
00001764  6100 01B6                662      BSR     ENDL
00001768  43F9 00002118            663      LEA     FIGHT_T_MSG, A1
0000176E  103C 000E                664      MOVE.B  #14, D0
00001772  4E4F                     665      TRAP    #15              ; Print MINES message
00001774  13FC 0003 000025DC       666      MOVE.B  #3,P_HP
0000177C  13FC 0003 000025DD       667      MOVE.B  #3,E_HP
00001784                           668  *    BSR FIGHT
00001784  6100 0072                669      BSR TOWER_ROOM_8
00001788                           670  
00001788                           671  TOWER_ROOM_7:
00001788  6100 0192                672      BSR     ENDL
0000178C  13FC 0003 000025DC       673      MOVE.B  #3,P_HP
00001794  13FC 0003 000025DD       674      MOVE.B  #3,E_HP
0000179C                           675      
0000179C  43F9 00002413            676      LEA     TOWER_MSG, A1
000017A2  103C 000E                677      MOVE.B  #14, D0
000017A6  4E4F                     678      TRAP    #15              ; Print MINES message
000017A8                           679      
000017A8  43F9 00001A54            680      LEA     USER_INPUT, A1   ; Load input buffer address
000017AE  103C 0002                681      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
000017B2  4E4F                     682      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
000017B4                           683      
000017B4  1239 00001A54            684      MOVE.B  USER_INPUT, D1   ; Load user input into D1
000017BA                           685  
000017BA  B23C 0031                686      CMP.B   #'1', D1         ; Compare input to '1'
000017BE  6700 0038                687      BEQ     TOWER_ROOM_8      ; If '1', branch to FIGHT
000017C2                           688      
000017C2  B23C 0032                689      CMP.B   #'2', D1         ; Compare input to '2'
000017C6  6700 007C                690      BEQ     TOWER_FIGHT_8    ; If '2', branch to
000017CA                           691      
000017CA                           692      
000017CA  6100 0150                693      BSR     ENDL
000017CE  6100 013A                694      BSR     INVALID_CHOICE   ; If input is invalid, show error
000017D2  61B4                     695      BSR     TOWER_ROOM_7           ; Repeat input prompt
000017D4                           696      
000017D4                           697      
000017D4                           698  TOWER_FIGHT_7:
000017D4  6100 0146                699      BSR     ENDL
000017D8  43F9 00002118            700      LEA     FIGHT_T_MSG, A1
000017DE  103C 000E                701      MOVE.B  #14, D0
000017E2  4E4F                     702      TRAP    #15              ; Print MINES message
000017E4  13FC 0003 000025DC       703      MOVE.B  #3,P_HP
000017EC  13FC 0003 000025DD       704      MOVE.B  #3,E_HP
000017F4                           705  *    BSR FIGHT
000017F4  6100 0072                706      BSR TOWER_ROOM_9
000017F8                           707  
000017F8                           708  
000017F8                           709  TOWER_ROOM_8:
000017F8  6100 0122                710      BSR     ENDL
000017FC  13FC 0003 000025DC       711      MOVE.B  #3,P_HP
00001804  13FC 0003 000025DD       712      MOVE.B  #3,E_HP
0000180C                           713      
0000180C  43F9 00002413            714      LEA     TOWER_MSG, A1
00001812  103C 000E                715      MOVE.B  #14, D0
00001816  4E4F                     716      TRAP    #15              ; Print MINES message
00001818                           717      
00001818  43F9 00001A54            718      LEA     USER_INPUT, A1   ; Load input buffer address
0000181E  103C 0002                719      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001822  4E4F                     720      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001824                           721      
00001824  1239 00001A54            722      MOVE.B  USER_INPUT, D1   ; Load user input into D1
0000182A                           723  
0000182A  B23C 0031                724      CMP.B   #'1', D1         ; Compare input to '1'
0000182E  6700 0038                725      BEQ     TOWER_ROOM_9      ; If '1', branch to FIGHT
00001832                           726      
00001832  B23C 0032                727      CMP.B   #'2', D1         ; Compare input to '2'
00001836  6700 007C                728      BEQ     TOWER_FIGHT_9    ; If '2', branch to
0000183A                           729      
0000183A                           730      
0000183A  6100 00E0                731      BSR     ENDL
0000183E  6100 00CA                732      BSR     INVALID_CHOICE   ; If input is invalid, show error
00001842  61B4                     733      BSR     TOWER_ROOM_8           ; Repeat input prompt
00001844                           734      
00001844                           735      
00001844                           736  TOWER_FIGHT_8:
00001844  6100 00D6                737      BSR     ENDL
00001848  43F9 00002118            738      LEA     FIGHT_T_MSG, A1
0000184E  103C 000E                739      MOVE.B  #14, D0
00001852  4E4F                     740      TRAP    #15  ; Print MINES message
00001854                           741      
00001854  13FC 0003 000025DC       742      MOVE.B  #3,P_HP
0000185C  13FC 0003 000025DD       743      MOVE.B  #3,E_HP
00001864                           744  *    BSR FIGHT
00001864  6100 0072                745      BSR TOWER_ROOM_10
00001868                           746  
00001868                           747      
00001868                           748  TOWER_ROOM_9:
00001868  6100 00B2                749      BSR     ENDL
0000186C  13FC 0003 000025DC       750      MOVE.B  #3,P_HP
00001874  13FC 0003 000025DD       751      MOVE.B  #3,E_HP
0000187C                           752      
0000187C  43F9 00002413            753      LEA     TOWER_MSG, A1
00001882  103C 000E                754      MOVE.B  #14, D0
00001886  4E4F                     755      TRAP    #15              ; Print MINES message
00001888                           756      
00001888  43F9 00001A54            757      LEA     USER_INPUT, A1   ; Load input buffer address
0000188E  103C 0002                758      MOVE.B  #2, D0           ; Max input length (1 char + NULL)
00001892  4E4F                     759      TRAP    #15              ; Read input (D0=2 -> Read 1 char)
00001894                           760      
00001894  1239 00001A54            761      MOVE.B  USER_INPUT, D1   ; Load user input into D1
0000189A                           762  
0000189A  B23C 0031                763      CMP.B   #'1', D1         ; Compare input to '1'
0000189E  6700 0038                764      BEQ     TOWER_ROOM_10      ; If '1', branch to FIGHT
000018A2                           765      
000018A2  B23C 0032                766      CMP.B   #'2', D1         ; Compare input to '2'
000018A6  6700 0030                767      BEQ     TOWER_ROOM_10     ; If '2', branch to
000018AA                           768      
000018AA                           769      
000018AA  6100 0070                770      BSR     ENDL
000018AE  6100 005A                771      BSR     INVALID_CHOICE   ; If input is invalid, show error
000018B2  61B4                     772      BSR     TOWER_ROOM_9           ; Repeat input prompt
000018B4                           773      
000018B4                           774      
000018B4                           775  TOWER_FIGHT_9:
000018B4  6100 0066                776      BSR     ENDL
000018B8  43F9 00002118            777      LEA     FIGHT_T_MSG, A1
000018BE  103C 000E                778      MOVE.B  #14, D0
000018C2  4E4F                     779      TRAP    #15              ; Print MINES message
000018C4  13FC 0003 000025DC       780      MOVE.B  #3,P_HP
000018CC  13FC 0003 000025DD       781      MOVE.B  #3,E_HP
000018D4                           782  *    BSR FIGHT
000018D4  6100 0002                783      BSR TOWER_ROOM_10
000018D8                           784  
000018D8                           785  TOWER_ROOM_10:
000018D8                           786      
000018D8  43F9 0000228F            787      LEA     CUT_TOWER, A1
000018DE  103C 000E                788      MOVE.B  #14, D0
000018E2  4E4F                     789      TRAP    #15              ; Print MINES message
000018E4  6100 0036                790      BSR     ENDL
000018E8  5204                     791      ADD.B   #1,D4
000018EA                           792      
000018EA  B83C 0002                793      CMP.B   #2,D4
000018EE  6700 0006                794      BEQ     MOUNT
000018F2                           795      
000018F2  6100 F77C                796      BSR     MINE
000018F6                           797  
000018F6                           798  *-------------------------------------------------------
000018F6                           799  *                  FINAL SEQUENCE
000018F6                           800  *-------------------------------------------------------
000018F6                           801  MOUNT:
000018F6  6100 0024                802      BSR     ENDL
000018FA  43F9 000023EC            803      LEA     FINAL_CUT , A1
00001900  103C 000E                804      MOVE.B  #14, D0
00001904  4E4F                     805      TRAP    #15  ; Print MINES message
00001906  6100 0CD6                806      BSR     GAME_OVER
0000190A                           807  *-------------------------------------------------------
0000190A                           808  *                INVALID INPUT HANDLING
0000190A                           809  *-------------------------------------------------------
0000190A                           810  INVALID_CHOICE:
0000190A  6100 0010                811      BSR     ENDL
0000190E  43F9 00002482            812      LEA     INVALID_MSG, A1
00001914  103C 000E                813      MOVE.B  #14, D0
00001918  4E4F                     814      TRAP    #15              ; Print invalid input message
0000191A  4E75                     815      RTS
0000191C                           816  
0000191C                           817  *-------------------------------------------------------
0000191C                           818  *                ENDL SUBROUTINE (NEW LINE)
0000191C                           819  *-------------------------------------------------------
0000191C                           820  ENDL:
0000191C  43F9 00001A57            821      LEA     CRLF, A1    ; Load newline characters
00001922  103C 000E                822      MOVE.B  #14, D0
00001926  4E4F                     823      TRAP    #15         ; Print new line
00001928  4E75                     824      RTS                 ; Return
0000192A                           825      
0000192A                           826  *---------------------------------------------------------
0000192A                           827  *                       Fight Suff
0000192A                           828  *---------------------------------------------------------
0000192A                           829  *FIGHT:
0000192A                           830  *    
0000192A                           831  *    BSR     ENDL
0000192A                           832  *    BSR     RNG
0000192A                           833  *    LEA     USER_INPUT, A1   ; Load input buffer address
0000192A                           834  *    MOVE.B  #2, D0           ; Max input length (1 char + NULL)
0000192A                           835  *    TRAP    #15              ; Read input (D0=2 -> Read 1 char)
0000192A                           836  *    MOVE.B  USER_INPUT, D1   ; Load user input into D1
0000192A                           837  *    BSR CONVR
0000192A                           838  *    
0000192A                           839  *    CMP     D3,D2
0000192A                           840  *    BEQ     DRAW
0000192A                           841  *  
0000192A                           842  *    ADD.B   D2,D3
0000192A                           843  *    
0000192A                           844  *    CMP     #3,D3
0000192A                           845  *    BEQ     PAPER
0000192A                           846  *    
0000192A                           847  *    CMP     #4,D3
0000192A                           848  *    BEQ     ROCK
0000192A                           849  *    
0000192A                           850  *    CMP     #5,D3
0000192A                           851  *    BEQ     SIS
0000192A                           852  *    
0000192A                           853  *    MOVE.B  D2,D7
0000192A                           854  *    
0000192A                           855  *    
0000192A                           856  *    CMP.B   #0,P_HP       
0000192A                           857  *    BEQ     GAME_OVER
0000192A                           858  *    
0000192A                           859  *    CMP.B   #0,E_HP
0000192A                           860  *    IF <NE> THEN
0000192A                           861  *        MOVE.B #0,D1
0000192A                           862  *        JSR FIGHT
0000192A                           863  *    ENDI
0000192A                           864  *    RTS
0000192A                           865  *    
0000192A                           866  DMG:
0000192A  43F9 00002574            867      LEA     DMG_MSG,  A1   ; loads first draw msg
00001930  103C 000E                868      MOVE.B  #14, D0
00001934  4E4F                     869      TRAP    #15              ; Prints message
00001936  4E75                     870      RTS
00001938                           871  
00001938                           872  DRAW:
00001938  BC3C 0000                873      CMP.B   #0, D6
0000193C  6700 0012                874      BEQ     FDRAW
00001940                           875      
00001940  43F9 0000249F            876      LEA     DRAW_MSG, A1
00001946  103C 000E                877      MOVE.B  #14, D0
0000194A  4E4F                     878      TRAP    #15              ; Prints message
0000194C  5206                     879      ADD.B   #1, D6         ; Adds to the draw count
0000194E  4E75                     880      RTS
00001950                           881      
00001950                           882  FDRAW:
00001950  43F9 000024E8            883      LEA     FDRAW_MSG,  A1   ; loads first draw msg
00001956  103C 000E                884      MOVE.B  #14, D0
0000195A  4E4F                     885      TRAP    #15              ; Prints message
0000195C  5206                     886      ADD.B   #1,  D6
0000195E  4E75                     887      RTS
00001960                           888      
00001960                           889  FOVER:
00001960  13FC 0003 000025DD       890      MOVE.B  #3,E_HP
00001968  43F9 00002525            891      LEA     FOVER_MSG,  A1   ; loads first draw msg
0000196E  103C 000E                892      MOVE.B  #14, D0
00001972  4E4F                     893      TRAP    #15              ; Prints message
00001974  5200                     894      ADD.B   #1,  D0
00001976                           895      
00001976                           896  PAPER:
00001976  43F9 000025BA            897      LEA     R_MSG,  A1   ; loads first draw msg
0000197C  103C 000E                898      MOVE.B  #14, D0
00001980  4E4F                     899      TRAP    #15              ; Prints message
00001982                           900      ;BSR     GAME_OVER
00001982                           901      
00001982  B43C 0002                902      CMP.B     #2,D2
00001986  6700 003C                903      BEQ F_WIN
0000198A                           904      
0000198A  6100 0048                905      BSR F_LOSE
0000198E                           906  
0000198E  4E75                     907      RTS
00001990                           908      
00001990                           909  ROCK:
00001990  43F9 000025C3            910      LEA     P_MSG,  A1   ; loads first draw msg
00001996  103C 000E                911      MOVE.B  #14, D0
0000199A  4E4F                     912      TRAP    #15              ; Prints message
0000199C                           913      
0000199C  B43C 0001                914      CMP.B   #1,D2
000019A0  6700 0022                915      BEQ F_WIN
000019A4                           916      
000019A4  6100 002E                917      BSR F_LOSE
000019A8                           918  
000019A8  4E75                     919      RTS
000019AA                           920      
000019AA                           921  SIS:
000019AA  43F9 000025CD            922      LEA     S_MSG,  A1   ; loads first draw msg
000019B0  103C 000E                923      MOVE.B  #14, D0
000019B4  4E4F                     924      TRAP    #15              ; Prints message
000019B6                           925      
000019B6  B43C 0003                926      CMP.B   #3,D2
000019BA  6700 0008                927      BEQ F_WIN
000019BE                           928      
000019BE  6100 0014                929      BSR F_LOSE
000019C2  4E75                     930      RTS
000019C4                           931  
000019C4                           932  F_WIN:
000019C4  6100 FF64                933      BSR     DMG
000019C8  1C39 000025DC            934      MOVE.B  P_HP, D6
000019CE  5306                     935      SUBI.B  #1,D6
000019D0  1486                     936      MOVE.B  D6,(A2)
000019D2  4246                     937      CLR     D6
000019D4                           938      
000019D4                           939  F_LOSE:
000019D4  6100 FF54                940      BSR     DMG
000019D8  1C39 000025DD            941      MOVE.B  E_HP, D6
000019DE  5339 000025DC            942      SUBI.B  #1, P_HP
000019E4  1686                     943      MOVE.B  D6, (A3)
000019E6  4246                     944      CLR     D6
000019E8                           945  *---------------------------------------------------------
000019E8                           946  *               RNG for fights
000019E8                           947  *---------------------------------------------------------
000019E8                           948  RNG:              
000019E8  3A3C 0001                949      MOVE    #1, D5
000019EC  3C3C 0003                950      MOVE    #3, D6
000019F0  9C45                     951      SUB     D5,D6             ;You should give Min in D5 and Max in D6
000019F2  3E06                     952      MOVE    D6,D7
000019F4  5246                     953      ADDI    #1,D6
000019F6  CEFC FFFF                954      MULU    #$FFFF,D7
000019FA  43F9 000025DA            955      LEA     SEED,A1
00001A00  103C 0008                956      MOVE.B  #8,d0
00001A04  4E4F                     957      TRAP    #15
00001A06  D251                     958      ADD     (A1),D1
00001A08  C2FC FFFF                959      MULU    #$FFFF,D1
00001A0C  0A81 F321F23A            960      EOR.L   #$F321F23A,D1
00001A12  3281                     961      MOVE    D1,(A1)
00001A14  C287                     962      AND.L   D7,D1    ;PREVENT OVERFLOW FOR (Max-Min)
00001A16  82C6                     963      DIVU    D6,D1         ;time count / (Max-Min)
00001A18  4841                     964      SWAP    D1              ;swap upper and lower words of D1 to put remainder in low word
00001A1A  D245                     965      ADD     D5,d1           ;D1.W contains number in the range of (Min,Max)
00001A1C  4240                     966      CLR     D0
00001A1E  4247                     967      CLR     D7
00001A20  4242                     968      CLR     D2
00001A22  1401                     969      MOVE.B  D1,D2
00001A24  4245                     970      CLR     D5
00001A26  4246                     971      CLR     D6
00001A28                           972      
00001A28  4E75                     973      RTS                    ; Return from subroutine, control passes back to the calling code
00001A2A                           974  
00001A2A                           975  
00001A2A                           976  CONVR:
00001A2A  B27C 0031                977      CMP #'1', D1
00001A2E  6700 0012                978      BEQ ONE
00001A32                           979      
00001A32  B27C 0032                980      CMP #'2', D1
00001A36  6700 0010                981      BEQ TWO
00001A3A                           982      
00001A3A  B27C 0033                983      CMP #'3', D1
00001A3E  6700 000E                984      BEQ THREE
00001A42                           985  
00001A42                           986  ONE:
00001A42  363C 0001                987      MOVE.W #1, D3
00001A46  4E75                     988      RTS
00001A48                           989      
00001A48                           990  TWO:
00001A48  363C 0002                991      MOVE.W #2, D3
00001A4C  4E75                     992      RTS
00001A4E                           993      
00001A4E                           994  THREE:
00001A4E  363C 0003                995      MOVE.W #3, D3
00001A52  4E75                     996      RTS
00001A54                           997    
00001A54                           998  *-------------------------------------------------------
00001A54                           999  *                  DATA SECTION
00001A54                          1000  *-------------------------------------------------------
00001A54                          1001  USER_INPUT:   DS.B  2   ; Reserve 2 bytes for input (1 char + NULL)
00001A56= 00                      1002  CHOICE_VAR:   DC.B  0
00001A57                          1003  
00001A57= 0D 0A 00                1004  CRLF:   DC.B  $0D, $0A, 0   ; Carriage Return + Line Feed (New Line)
00001A5A                          1005  
00001A5A= 57 65 6C 63 6F 6D ...   1006  WELCOME_MSG:  DC.B 'Welcome to the Adventures of dingle dorf!', $0D, $0A
00001A85= 44 69 6E 67 6C 65 ...   1007                DC.B 'Dingle dorf has set out on an epic adventure to fix the relic of equinox', $0D, $0A
00001ACF= 74 68 65 20 72 65 ...   1008                DC.B 'the relic has been broken in half and the peices stolen', $0D, $0A
00001B08= 74 68 65 20 66 69 ...   1009                DC.B 'the first peice has been taken by the wizards and is held at their tower', $0D, $0A
00001B52= 74 68 65 20 73 65 ...   1010                DC.B 'the second peice is being held by the cobalts at the bottom of the mine', $0D, $0A
00001B9B= 6E 6F 77 20 79 6F ...   1011                DC.B 'now you must guide dingle dorf on his journy and beat monsters and mages', $0D, $0A
00001BE5= 49 4E 20 54 48 45 ...   1012                DC.B 'IN THE LEGENDARY AINCHENT RIGHT OF!!', $0D, $0A
00001C0B= 52 4F 43 4B 21 21 ...   1013                DC.B 'ROCK!! PAPER!! SISSORS!!!!', $0D, $0A, 0
00001C28                          1014                
00001C28                          1015  OPEN_MSG:
00001C28= 59 6F 75 20 61 77 ...   1016                DC.B 'You awaken in a forrest the smell of due filling your lungs', $0D, $0A
00001C65= 61 73 20 79 6F 75 ...   1017                DC.B 'as you come to your feet you obesrver your suroundings', $0D, $0A
00001C9D= 79 6F 75 20 61 72 ...   1018                DC.B 'you are at the base of the mountian containing the grear forge', $0D, $0A
00001CDD= 79 6F 75 72 20 63 ...   1019                DC.B 'your camp the same as whenst you lay your head to rest', $0D, $0A
00001D15= 61 73 20 79 6F 75 ...   1020                DC.B 'as you look to the top of the mountian', $0D, $0A
00001D3D= 79 6F 75 20 73 65 ...   1021                DC.B 'you see a dwarf atop the mountian looking down at you' $0D, $0A
00001D72= 75 6E 61 62 6C 65 ...   1022                DC.B 'unable to see his face as the sun blinds you, there is an unease wash over you as you look', $0D, $0A
00001DCE= 74 68 65 20 64 77 ...   1023                DC.B 'the dwarf decend foward dissapering from your sight', $0D, $0A
00001E03= 79 6F 75 20 6D 65 ...   1024                DC.B 'you meet a diverging path', $0D, $0A
00001E1E= 70 61 74 68 20 31 ...   1025                DC.B 'path 1. enter the mines', $0D, $0A
00001E37= 70 61 74 68 20 32 ...   1026                DC.B 'path 2. go to tower', $0D, $0A, 0
00001E4D                          1027  
00001E4D= 57 68 65 72 65 20 ...   1028  CHOICE_MSG:   DC.B 'Where will you go? (1 or 2): ', 0
00001E6B= 59 6F 75 20 65 6E ...   1029  MINES_MSG:    DC.B 'You enter the mines', $0D, $0A
00001E80= 41 73 20 79 6F 75 ...   1030                DC.B 'As you enter a cavity in the mines you see two dirverging paths', $0D, $0A
00001EC1= 54 68 65 20 66 69 ...   1031                DC.B 'The first a gradual slope down with mushrooms lining the floor', $0D, $0A
00001F01= 54 68 65 20 73 65 ...   1032                DC.B 'The second a steep slope down a smell of blood wafting from it', $0D, $0A
00001F41= 57 68 69 63 68 20 ...   1033                DC.B 'Which will you enter', $0D, $0A, 0
00001F58                          1034               
00001F58= 41 73 20 79 6F 75 ...   1035  MINES_MSG1:    DC.B 'As you enter the next cavity in the mines you see two dirverging paths', $0D, $0A
00001FA0= 54 68 65 20 66 69 ...   1036                DC.B 'The first a gradual slope down with mushrooms lining the floor', $0D, $0A
00001FE0= 54 68 65 20 73 65 ...   1037                DC.B 'The second a steep slope down a smell of blood wafting from it', $0D, $0A
00002020= 57 68 69 63 68 20 ...   1038                DC.B 'Which will you enter', $0D, $0A, 0
00002037                          1039                
00002037= 41 73 20 79 6F 75 ...   1040  MINES_MSG2:   DC.B 'As you enter the n00ext cavity in the mines you see two dirverging paths', $0D, $0A
00002081= 54 68 65 20 66 69 ...   1041                DC.B 'The first a steep slope down a smell of blood wafting from it', $0D, $0A
000020C0= 54 68 65 20 73 65 ...   1042                DC.B 'The second a gradual slope down with mushrooms lining the floor', $0D, $0A
00002101= 57 68 69 63 68 20 ...   1043                DC.B 'Which will you enter', $0D, $0A, 0
00002118= 41 20 66 69 67 68 ...   1044  FIGHT_T_MSG:  DC.B 'A fight will be here', $0D, $0A, 0
0000212F= 41 73 20 79 6F 75 ...   1045  CUT_MINE:     DC.B 'As you aproch the botom of the mine you see before you', $0D, $0A
00002167= 54 68 65 20 63 6F ...   1046                DC.B 'The cobalt king sitting upon his throne made of crude iron', $0D, $0A
000021A3= 41 73 20 79 6F 75 ...   1047                DC.B 'As you inch closer you begin to knowtace the blade in his back', $0D, $0A
000021E3= 74 68 65 20 6B 6F ...   1048                DC.B 'the kobalt king is dead as you look around the room you see', $0D, $0A
00002220= 49 6E 20 61 20 70 ...   1049                DC.B 'In a pile of iron ore a glint you rumage through to find half the relic', $0D, $0A
00002269= 4E 6F 77 20 79 6F ...   1050                DC.B 'Now you must continue your journy .', $0D, $0A, 0
0000228F= 41 73 20 79 6F 75 ...   1051  CUT_TOWER:    DC.B 'As you reach the top of the tower having gone through many battles to get here', $0D, $0A
000022DF= 62 65 66 6F 72 65 ...   1052                DC.B 'before you lies an empty room of the archmage filled with pods full of liques ', $0D, $0A
0000232F= 57 69 74 68 69 6E ...   1053                DC.B 'Within the liquid there is small childern eah labled  attempt along with a number', $0D, $0A
00002382= 41 73 20 79 6F 75 ...   1054                DC.B 'As you walk past this you see on a pedistal a half of the relic', $0D, $0A
000023C3= 59 6F 75 20 74 61 ...   1055                DC.B 'You take it and contine on your journy', $0D, $0A, 0 
000023EC                          1056  
000023EC= 41 20 66 69 67 68 ...   1057  FINAL_CUT     DC.B 'A fight will be here AND OTHER STUFF', $0D, $0A, 0 
00002413= 59 6F 75 20 67 6F ...   1058  TOWER_MSG:    DC.B 'You go to tower', $0D, $0A, 0
00002425= 59 6F 75 72 20 6F ...   1059  FIGHT_MSG:    DC.B 'Your opponent stands before you unwavering the only way out is trough you must defeat them', $0D, $0A ,0
00002482= 49 6E 76 61 6C 69 ...   1060  INVALID_MSG:  DC.B 'Invalid choice. Try again.', $0D, $0A, 0
0000249F= 59 65 74 20 61 6E ...   1061  DRAW_MSG:     DC.B 'Yet another draw occurs the tensions rise as to who will be victorious', $0D, $0A ,0
000024E8= 41 20 64 72 61 77 ...   1062  FDRAW_MSG:    DC.B 'A draw occurs first time this fight who will be the victor', $0D, $0A ,0
00002525= 54 68 65 20 66 69 ...   1063  FOVER_MSG:    DC.B 'The fight comes to its end you have survived yet again but can you keep this up' $0D, $0A ,0
00002574= 41 20 62 6C 6F 77 ...   1064  DMG_MSG:      DC.B 'A blow has been dealt the fight draws closer to its end', $0D, $0A ,0
000025AE= 47 41 4D 45 20 4F ...   1065  GO_MSG:       DC.B 'GAME OVER', $0D, $0A ,0
000025BA= 52 4F 43 4B 20 57 ...   1066  R_MSG:        DC.B 'ROCK WIN', 0
000025C3= 50 41 50 45 52 20 ...   1067  P_MSG:        DC.B 'PAPER WIN', 0
000025CD= 53 49 53 53 4F 52 ...   1068  S_MSG:        DC.B 'SISSORS WIN', 0
000025DA= 0001                    1069  SEED          DC.W    1
000025DC                          1070  P_HP          DS.B    1
000025DD                          1071  E_HP          DS.B    1
000025DE                          1072  
000025DE                          1073  GAME_OVER:
000025DE  43F8 25AE               1074         LEA     GO_MSG,  A1   ; loads first draw msg
000025E2  103C 000E               1075         MOVE.B  #14, D0
000025E6  4E4F                    1076         TRAP    #15              ; Prints messag
000025E8                          1077      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHOICE_MSG          1E4D
CHOICE_VAR          1A56
CONVR               1A2A
CRLF                1A57
CUT_MINE            212F
CUT_TOWER           228F
DMG                 192A
DMG_MSG             2574
DRAW                1938
DRAW_MSG            249F
ENDL                191C
EXIT                0
E_HP                25DD
FDRAW               1950
FDRAW_MSG           24E8
FIGHT_MSG           2425
FIGHT_T_MSG         2118
FINAL_CUT           23EC
FOVER               1960
FOVER_MSG           2525
F_LOSE              19D4
F_WIN               19C4
GAME_OVER           25DE
GO_MSG              25AE
INVALID_CHOICE      190A
INVALID_MSG         2482
MINE                1070
MINES_MSG           1E6B
MINES_MSG1          1F58
MINES_MSG2          2037
MINE_FIGHT_1        1108
MINE_FIGHT_2        1178
MINE_FIGHT_3        11EA
MINE_FIGHT_4        125C
MINE_FIGHT_5        12CE
MINE_FIGHT_6        133E
MINE_FIGHT_7        13AE
MINE_FIGHT_8        141E
MINE_FIGHT_9        148E
MINE_ROOM_1         10BC
MINE_ROOM_10        14B2
MINE_ROOM_2         112C
MINE_ROOM_3         119C
MINE_ROOM_4         120E
MINE_ROOM_5         1280
MINE_ROOM_6         12F2
MINE_ROOM_7         1362
MINE_ROOM_8         13D2
MINE_ROOM_9         1442
MOUNT               18F6
ONE                 1A42
OPEN_MSG            1C28
OPEN_PATH           103C
OPEN_SCENE          1026
PAPER               1976
P_HP                25DC
P_MSG               25C3
RNG                 19E8
ROCK                1990
R_MSG               25BA
SEED                25DA
SIS                 19AA
START               1000
S_MSG               25CD
THREE               1A4E
TOWER               14D0
TOWER_FIGHT_1       1530
TOWER_FIGHT_2       15A2
TOWER_FIGHT_3       1612
TOWER_FIGHT_4       1682
TOWER_FIGHT_5       16F2
TOWER_FIGHT_6       1764
TOWER_FIGHT_7       17D4
TOWER_FIGHT_8       1844
TOWER_FIGHT_9       18B4
TOWER_MSG           2413
TOWER_ROOM_1        14E4
TOWER_ROOM_10       18D8
TOWER_ROOM_2        1554
TOWER_ROOM_3        15C6
TOWER_ROOM_4        1636
TOWER_ROOM_5        16A6
TOWER_ROOM_6        1716
TOWER_ROOM_7        1788
TOWER_ROOM_8        17F8
TOWER_ROOM_9        1868
TWO                 1A48
USER_INPUT          1A54
WELCOME             1010
WELCOME_MSG         1A5A
